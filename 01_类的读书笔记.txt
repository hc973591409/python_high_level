1.	类也是对象
    类就是⼀组⽤来描述如何⽣成⼀个对象的代码段
    Python中的类还远不⽌如此。类同样也是⼀种对象。是的，没错，
    就 是对象。只要你使⽤关键字class，Python解释器在执⾏的时候就
    会创建⼀个对象(类)
    1.	你可以将它赋值给⼀个变量 
    2.	你可以拷⻉它 
    3.	你可以为它增加属性 
    4.	你可以将它作为函数参数进⾏传递

2.	动态地创建类
    因为类也是对象，你可以在运⾏时动态的创建它们，就像其他任何对
    象⼀ 样。⾸先，你可以在函数中创建类，使⽤class关键字即可。

内建函数type
    这个古⽼但强⼤的函数能够让你知道⼀个对象的类 型是什么
    print	type(ObjectCreator())	#实例对象的类型 
    <class	'__main__.ObjectCreator'>

    print	type(ObjectCreator)	#类的类型 
    <type	'type'>   类的类型就是type

3.	使⽤type创建类
    type还有⼀种完全不同的功能，动态的创建类type可以接受⼀个类的描述
    作为参数，然后返回⼀个类。
    type可以像这样⼯作：
    type(类名,	由⽗类名称组成的元组（针对继承的情况，可以为空），
    包含属性的字典（名称和值）)
    Test2	=	type("Test2",(),{})	#定了⼀个Test2类 
    In	[5]:	Test2()	#创建了⼀个Test2类的实例对象 
    Out[5]:	<__main__.Test2	at	0x10d406b38>
    即type函数中第1个 实参，也可以叫做其他的名字，这个名字表示类的名字
    In	[23]:	MyDogClass	=	type('MyDog',	(),	{})
    In	[24]:	print	MyDogClass <class	'__main__.MyDog'>

4.	使⽤type创建带有属性的类
    type	接受⼀个字典来为类定义属性，因此
    >>>	Foo	=	type('Foo',	(),	{'bar':True})
    <==> class Foo(object):
            bar = True
    并且可以把Foo当作普通的类使用：
    例如 print(Foo)   f = Foo() print(f.bar)
    当然，你可以向这个类继承，所以，如下的代码：
    >>>	class	FooChild(Foo): …							
    pass

    还可以写成 FooChild = type('FooChild',(Foo,),{})
    第二个参数的元组是继承的父类名字
    添加的属性是类属性，并不是实例属性

5.	使⽤type创建带有⽅法的类
    所有能用class做的事情都可以用type做，class也是通过调用type实现的

6.	到底什么是元类（终于到主题了）
    元类就是⽤来创建类的“东⻄”。元类就是⽤来创建这些类（对象）的，元类就是类的类，
    为函数type实际上是⼀个元类。type就是Python在背后⽤来创建所有 类的元类。
    str是⽤来创建字符串对象的类，⽽int 是⽤来创建整数对象的类。type就是创建类
    对象的类。你可以通过检查 __class__属性来看到这⼀点
    Python中所有的东⻄，注意，我是指所有的东 ⻄——都是对象。这包括整数、字符串、
    函数以及类

7.	__metaclass__属性
    你可以在定义⼀个类的时候为其添加__metaclass__属性
    class	Foo(object):				
        __metaclass__	=	something…				
        ...省略...
    
    Python做了如下的操作：
    1.	Foo中有__metaclass__这个属性吗？如果是，Python会通过 
    __metaclass__创建⼀个名字为Foo的类(对象) 
    2.	如果Python没有找到__metaclass__，它会继续在Bar（⽗类）
    中寻找 __metaclass__属性，并尝试做和前⾯同样的操作。 
    3.	如果Python在任何⽗类中都找不到__metaclass__，它就会在模块
    层次 中去寻找__metaclass__，并尝试做同样的操作。
    4.	如果还是找不到__metaclass__,Python就会⽤内置的type来创建
    这个类 对象。

8.	⾃定义元类
    1.	拦截类的创建 
    2.	修改类 
    3.	返回修改之后的类

===========================================================
python是动态语⾔
__slots__
    动态语⾔：可以在运⾏的过程中，修改代码
    静态语⾔：编译时已经确定好代码，运⾏过程中不能修改
    class	Person(object):				
        __slots__	=	("name",	"age")
    这个类就只有name和age属性
    使⽤__slots__要注意，__slots__定义的属性仅对当前类实例起作⽤，对 
    继承的⼦类是不起作⽤的

⽣成器






















    







